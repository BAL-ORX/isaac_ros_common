# Dockerfile.sprytrack

ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# -----------------------------
# 0) Before running the docker_deploy.sh script, 
# copy the ros2_ws folder into the Docker build 
# context, i.e. to the same folder as this file.
# This is necessary to build the spryTrack package.
# I'm sure there's a better way to do this, but
# this is how I got it to work for now.
# After the build you can safely delete it again.
# -----------------------------

# -----------------------------
# 1) Install base packages
# -----------------------------
RUN --mount=type=cache,target=/var/cache/apt \
apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    python3-dev python3-pip python3-numpy \
    libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev \
    libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \
    libatlas-base-dev gfortran \
&& rm -rf /var/lib/apt/lists/*

# -----------------------------
# 2) Build OpenCV 4.8 with CUDA
# -----------------------------
WORKDIR /tmp/opencv_build
RUN git clone --branch 4.8.0 https://github.com/opencv/opencv.git && \
git clone --branch 4.8.0 https://github.com/opencv/opencv_contrib.git && \
cd opencv && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DWITH_CUDA=ON \
          -DBUILD_opencv_dnn=OFF \
          -DCUDA_ARCH_BIN="8.7" \ 
          -DWITH_VTK=ON \
          -DENABLE_FAST_MATH=1 \
          -DCUDA_FAST_MATH=1 \
          -DWITH_CUBLAS=1 \
          -DWITH_QT=OFF \
          -DWITH_GSTREAMER=OFF \
          -DBUILD_opencv_python2=OFF \
          -DBUILD_opencv_python3=ON \
          -DPYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \
          -DOPENCV_ENABLE_NONFREE=OFF \
          -DOPENCV_GENERATE_PKGCONFIG=ON \
          -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
          .. && \
    make -j"$(nproc)" && make install && ldconfig && \
    # Clean up
    cd / && rm -rf /tmp/opencv_build


# -----------------------------
# 3) Copy & run your spryTrack install script
# -----------------------------
COPY scripts/install-sprytrack-aarch64.sh /opt/sprytrack/install-sprytrack-aarch64.sh
RUN chmod +x /opt/sprytrack/install-sprytrack-aarch64.sh

COPY udev_rules/51-atracsys-stk.rules /etc/udev/rules.d/51-atracsys-stk.rules

RUN --mount=type=cache,target=/var/cache/apt \
  if [ "$(uname -m)" = "x86_64" ]; then \
    echo "No x86_64 script provided. Adapt if needed."; \
  else \
    /opt/sprytrack/install-sprytrack-aarch64.sh; \
  fi

# -----------------------------------------------------
# 4) Copy your ROS workspace into the container
#     This must include:
#       - atracsys_ros/sprytrack/s3dk
#       - atracsys_ros/sprytrack/sdk
# -----------------------------------------------------
WORKDIR /workspaces
COPY . /tmp/debug_context
RUN echo "Docker build context at: $(date)" && ls -la /tmp/debug_context

COPY ros2_ws isaac_ros-dev

# -----------------------------
# 5) Environment variables for Atracsys
# -----------------------------
ENV ATRACSYS_SDK_HOME=/workspaces/isaac_ros-dev/src/atracsys_ros/sprytrack/sdk
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/workspaces/isaac_ros-dev/src/atracsys_ros/sprytrack/sdk/lib"
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/workspaces/isaac_ros-dev/src/atracsys_ros/sprytrack/s3dk/build/bin"

# -----------------------------------------------------
# 6) Build the S3DK library (liblibs3dk_gpu.so)
#    Then build the sprytrack package with colcon
# -----------------------------------------------------
WORKDIR /workspaces/isaac_ros-dev
RUN . /opt/ros/humble/setup.sh && \
    cd src/atracsys_ros/sprytrack/s3dk && \
    mkdir -p build && cd build && \
    cmake ../c++ && \
    make -j"$(nproc)" && \
    cd /workspaces/isaac_ros-dev && \
    colcon build --packages-select atracsys_msgs sprytrack && \
    . install/setup.sh

# -----------------------------
# 7) Make folder for config inside container
# -----------------------------
RUN mkdir -p /home/admin/atracsys_sprytrack300_0
VOLUME ["/home/admin/atracsys_sprytrack300_0"]

# Typically remain root in Docker
USER root